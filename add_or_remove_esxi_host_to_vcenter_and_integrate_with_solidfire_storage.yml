---
- hosts: localhost

  vars_files:
  - '.secrets.yml'
  - 'add_or_remove_vars.yml'

  collections:
    - netapp.elementsw
    - community.vmware

  vars:
    sf_url: "https://{{ elementsw_hostname }}/json-rpc/11.0/"
    state: present
    validate_sf_certs: "False"
    validate_vm_certs: no


  tasks:
  - name: Define additional vSwitch variables if using 2-cable VSS
    set_fact:
      vm_vswitch: vSwitch0
      iscsi_vswitch: vSwitch0
      vswitch2_uplink1: "{{ vswitch0_uplink1 }}"
      vswitch2_uplink2: "{{ vswitch0_uplink2 }}"
      vswitch1_uplink1: "{{ vswitch0_uplink1 }}"
      vswitch1_uplink2: "{{ vswitch0_uplink2 }}"
    when:
      - number_of_host_uplinks == 2
      - switch_type == "vss"

  - name: Define additional vSwitch variables if using 6-cable VSS
    set_fact:
      vm_vswitch: vSwitch1
      iscsi_vswitch: vSwitch2
    when:
      - number_of_host_uplinks == 6
      - switch_type == "vss"

  - name: Define additional vSwitch variables if using 2-cable VDS
    set_fact:
      vm_vswitch: "{{ vds_name }}"
      iscsi_vswitch: "{{ vds_name }}"
      vswitch2_uplink1: "{{ vswitch0_uplink1 }}"
      vswitch2_uplink2: "{{ vswitch0_uplink2 }}"
      vswitch1_uplink1: "{{ vswitch0_uplink1 }}"
      vswitch1_uplink2: "{{ vswitch0_uplink2 }}"
    when:
      - number_of_host_uplinks == 2
      - switch_type == "vds"

  - name: Login into vCenter
    uri:
      url: https://{{ vcenter_hostname }}/rest/com/vmware/cis/session
      force_basic_auth: yes
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      method: POST
      user: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
    register: login


  - name: Create Datacenter
    community.vmware.vmware_datacenter:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter_name }}'
      state: "{{ state | default(present) }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    register: datacenter_create_result
    when:
      - state == "present"

  - name: Create Cluster
    community.vmware.vmware_cluster:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter_name: "{{ datacenter_name }}"
      cluster_name: "{{ cluster_name }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    register: cl_result
    delegate_to: localhost
    when:
      - state == "present"

  - name: Enable HA and VM monitoring without admission control
    community.vmware.vmware_cluster_ha:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: "{{ datacenter_name }}"
      cluster_name: "{{ cluster_name }}"
      enable_ha: true
      ha_vm_monitoring: vmMonitoringOnly
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"

  - name: Enable DRS and set default VM behavior to fully automated
    community.vmware.vmware_cluster_drs:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter_name: "{{ datacenter_name }}"
      cluster_name: "{{ cluster_name }}"
      enable_drs: True
      drs_default_vm_behavior: fullyAutomated
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"


  - name: Add ESXi Host to vCenter
    community.vmware.vmware_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: "{{ datacenter_name }}"
      cluster: "{{ cluster_name }}"
      esxi_hostname: '{{ esxi_hostname }}'
      esxi_username: '{{ esxi_username }}'
      esxi_password: '{{ esxi_password }}'
      state: "{{ state | default(present) }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"

  - name: Add 2nd NIC to vSwitch0 when using VSS
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch0
      nics:
        - '{{ vswitch0_uplink1 }}'
        - '{{ vswitch0_uplink2 }}'
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vss"

  - name: Create distributed switch for VDS
    community.vmware.vmware_dvswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: '{{ datacenter_name }}'
      switch: "{{ vds_name }}"
      version: 6.5.0
      mtu: 9000
      uplink_quantity: 2
      uplink_prefix: 'Uplink_'
      discovery_protocol: lldp
      discovery_operation: both
      multicast_filtering_mode: basic
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: present
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vds"

  - name: Create portgroups for VDS
    community.vmware.vmware_dvs_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      switch_name: "{{ vds_name }}"
      portgroup_name: "{{ item.portgroup_name }}"
      vlan_id: "{{ item.vlan_id }}"
      num_ports: 120
      portgroup_type: earlyBinding
      state: present
      port_policy:
        block_override: true
        vlan_override: true
        security_override: true
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    loop:
      - { portgroup_name: '{{ vds_management_portgroup_name }}', vlan_id: '{{ vds_management_vlan_id }}' }
      - { portgroup_name: '{{ VM_network_portgroup_name }}', vlan_id: '{{ VM_network_vlan_id }}' }
      - { portgroup_name: '{{ vMotion_portgroup_name }}', vlan_id: '{{ vMotion_vlan_id }}' }
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vds"

  - name: Create portgroups for iSCSI VDS
    community.vmware.vmware_dvs_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      switch_name: "{{ vds_name }}"
      portgroup_name: "{{ item.portgroup_name }}"
      vlan_id: "{{ item.vlan_id }}"
      num_ports: 120
      portgroup_type: earlyBinding
      state: present
      port_policy:
        block_override: true
        vlan_override: true
        security_override: true
        uplink_teaming_override: true
      teaming_policy:
        load_balance_policy: 'failover_explicit'
        active_uplinks: ['{{ item.activeNic }}']
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    loop:
      - { portgroup_name: '{{ iscsia_portgroup_name }}', vlan_id: '{{ iscsi_vlan_id }}', activeNic: 'Uplink_2' }
      - { portgroup_name: '{{ iscsib_portgroup_name }}', vlan_id: '{{ iscsi_vlan_id }}', activeNic: 'Uplink_1' }
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vds"

  - name: Unmount VMFS datastores to ESXi
    vmware_host_datastore:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datastore_name: '{{ volname }}'
      esxi_hostname: '{{ esxi_hostname }}'
      state: "{{ state | default(present) }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "absent"

  - name: Add Host to VDS for present state or remove first vmnic for absent
    community.vmware.vmware_dvs_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: "{{ vds_name }}"
      vmnics:
        - "{{ vswitch0_uplink2 }}"
      state: present
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - switch_type == "vds"

  - name: Migrate Management vmk0 from VSS to VDS
    community.vmware.vmware_migrate_vmk:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      device: vmk0
      current_switch_name: vSwitch0
      current_portgroup_name: Management Network
      migrate_switch_name: "{{ vds_name }}"
      migrate_portgroup_name: Management Network
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vds"

  - name: Delete VMkernel ports from VDS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      dvswitch_name: '{{ vds_name }}'
      portgroup_name: '{{ item.portgroup_name }}'
      device: '{{ item.device }}'
      state: absent
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    loop:
      - { portgroup_name: '{{ vMotion_portgroup_name }}', device: 'vmk3' }
      - { portgroup_name: '{{ iscsia_portgroup_name }}', device: 'vmk1' }
      - { portgroup_name: '{{ iscsib_portgroup_name }}', device: 'vmk2' }
    when:
      - state == "absent"
      - switch_type == "vds"

  - name: Add VMware vSwitch0 for cleanup adding back in vmnic0 for VDS
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch0
      state: present
      mtu: 9000
      nics:
        - '{{ vswitch0_uplink1 | default(vmnic0) }}'
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "absent"
      - switch_type == "vds"


#do a manual migration at this point. you need to do it manually.
#cannot migrate from VDS to VSS via Ansible. Have not looked into REST code to do it.

  - debug: msg=" PAUSE> Do not continue until after you migrate vmk0 manually via vCenter from VDS to VSS named Management Network"
    when:
      - state == "absent"
      - switch_type == "vds"
  - pause:
    when:
      - state == "absent"
      - switch_type == "vds"

  - name: Delete VMware switch '{{ vds_name }}'
    community.vmware.vmware_dvswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: '{{ datacenter_name }}'
      switch: ' {{ vds_name }}'
      state: absent
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "absent"
      - switch_type == "vds"

  - name: Remove VMware vSwitch0 from VDS setup
    community.vmware.vmware_vswitch:
      hostname: '{{ esxi_hostname }}'
      username: '{{ esxi_username }}'
      password: '{{ esxi_password }}'
      switch: vSwitch0
      nics: "{{ vswitch0_uplink1 }}"
      state: absent
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - state == "present"

  - name: Add Host to VDS switch
    community.vmware.vmware_dvs_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: "{{ vds_name }}"
      vmnics:
        - "{{ vswitch0_uplink2 }}"
        - "{{ vswitch0_uplink1 }}"
      state: present
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - state == "present"

  - name: Remove VM Network from vSwitch0 for VSS
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch0
      portgroup: "VM Network"
      state: absent
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vss"

  - name: Remove Management Network VM Portgroup from vSwitch0 for VSS
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch0
      portgroup: "{{ management_portgroup_name }}"
      vlan_id: "{{ management_vlan_id }}"
      state: absent
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - management_portgroup_name is defined
      - switch_type == "vss"

  - name: Add Management Network VM Portgroup for VSS
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch0
      portgroup: "{{ management_portgroup_name }}"
      vlan_id: "{{ management_vlan_id }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"
      - management_portgroup_name is defined
      - switch_type == "vss"

  - name: Add VMware vSwitch1 and vSwitch2 on {{ esxi_hostname }} for 6-cable VSS
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: '{{ item.switch_name }}'
      nics:
        - '{{ item.nic1 }}'
        - '{{ item.nic2 }}'
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    loop:
      - { switch_name: 'vSwitch1', nic1: '{{ vswitch1_uplink1 | default(vmnic3) }}', nic2: '{{ vswitch1_uplink2 | default(vmnic4) }}' }
      - { switch_name: 'vSwitch2', nic1: '{{ vswitch2_uplink1 | default(vmnic5) }}', nic2: '{{ vswitch2_uplink2 | default(vmnic6) }}' }
    delegate_to: localhost
    when:
      - state == "present"
      - number_of_host_uplinks == 6
      - switch_type == "vss"

  - name: Remove VMKernel ports for VSS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ item.vswitch_name }}"
      portgroup_name: '{{ item.portgroup_name }}'
      device: "{{ item.device }}"
      state: "{{ state }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    loop:
      - { vswitch_name: '{{ iscsi_vswitch }}', portgroup_name: '{{ iscsia_portgroup_name }}', device: 'vmk1' }
      - { vswitch_name: '{{ iscsi_vswitch }}', portgroup_name: '{{ iscsib_portgroup_name }}', device: 'vmk2' }
      - { vswitch_name: '{{ vm_vswitch }}', portgroup_name: '{{ vMotion_portgroup_name }}', device: 'vmk3' }
    delegate_to: localhost
    when:
      - state == "absent"
      - switch_type == "vss"

  - name: Add or remove portgroups from VSS
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ item.switch }}"
      portgroup: "{{ item.portgroup }}"
      vlan_id: "{{ item.vlan_id }}"
      state: "{{ state }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    loop:
      - { switch: '{{ vm_vswitch }}', portgroup: '{{ VM_network_portgroup_name }}', vlan_id: '{{ VM_network_vlan_id }}' }
    delegate_to: localhost
    when:
      - switch_type == "vss"


  - name: Add or Remove iSCSI portgroups for VSS
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ item.switch }}"
      portgroup: "{{ item.portgroup }}"
      vlan_id: "{{ item.vlan_id }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: "{{ state }}"
      security:
        promiscuous_mode: False
        mac_changes: False
        forged_transmits: False
      teaming:
        #load_balancing: failover_explicit
        network_failure_detection: link_status_only
        notify_switches: true
        failback: true
        active_adapters:
            - "{{ item.adapter }}"
    register: teaming_result
    loop:
      - { switch: '{{ iscsi_vswitch }}', portgroup: '{{ iscsia_portgroup_name }}', vlan_id: '{{ iscsi_vlan_id }}', adapter: '{{ vswitch2_uplink2 }}' }
      - { switch: '{{ iscsi_vswitch }}', portgroup: '{{ iscsib_portgroup_name }}', vlan_id: '{{ iscsi_vlan_id }}', adapter: '{{ vswitch2_uplink1 }}' }
    delegate_to: localhost
    when: switch_type == "vss"

  - name: Add or remove vMotion port group to VSS
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ vm_vswitch }}"
      portgroup: "{{ vMotion_portgroup_name }}"
      vlan_id: "{{ vMotion_vlan_id }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      security:
        promiscuous_mode: False
        mac_changes: False
        forged_transmits: False
      traffic_shaping:
        enabled: True
        average_bandwidth: 1000000
        peak_bandwidth: 1200000
        burst_size: 64000
      teaming:
        network_failure_detection: link_status_only
        notify_switches: true
        failback: true
        active_adapters:
          - "{{ vswitch1_uplink2 }}"
          - "{{ vswitch1_uplink1 }}"
      state: "{{ state }}"
    register: teaming_result
    delegate_to: localhost
    when:
      - switch_type == "vss"

  - name: Add VMkernels for VSS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ item.vswitch_name }}"
      portgroup_name: '{{ item.portgroup_name }}'
      mtu: 9000
      network:
        type: 'static'
        default_gateway: "{{ item.default_gateway }}"
        ip_address: '{{ item.ip_address }}'
        subnet_mask: '{{ item.subnet_mask }}'
      state: "{{ state }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    loop:
      - { vswitch_name: '{{ iscsi_vswitch }}', portgroup_name: '{{ iscsia_portgroup_name }}', default_gateway: '{{ iscsi_gateway }}', ip_address: '{{ iscsia_ip }}', subnet_mask: '{{ iscsi_subnet }}'}
      - { vswitch_name: '{{ iscsi_vswitch }}', portgroup_name: '{{ iscsib_portgroup_name }}', default_gateway: '{{ iscsi_gateway }}', ip_address: '{{ iscsib_ip }}', subnet_mask: '{{ iscsi_subnet }}'}
      - { vswitch_name: '{{ vm_vswitch }}', portgroup_name: '{{ vMotion_portgroup_name }}', default_gateway: '{{ vmotion_gateway }}', ip_address: '{{ vmotion_ip }}', subnet_mask: '{{ vmotion_subnet }}'}
    when:
      - state == "present"
      - switch_type == "vss"


  - name: Add VMkernels for VDS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      dvswitch_name: "{{ item.dvswitch_name }}"
      portgroup_name: '{{ item.portgroup_name }}'
      mtu: 9000
      network:
        type: 'static'
        default_gateway: "{{ item.default_gateway }}"
        ip_address: '{{ item.ip_address }}'
        subnet_mask: '{{ item.subnet_mask }}'
      state: "{{ state }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    loop:
      - { dvswitch_name: '{{ vds_name }}', portgroup_name: '{{ iscsia_portgroup_name }}', default_gateway: '{{ iscsi_gateway }}', ip_address: '{{ iscsia_ip }}', subnet_mask: '{{ iscsi_subnet }}'}
      - { dvswitch_name: '{{ vds_name }}', portgroup_name: '{{ iscsib_portgroup_name }}', default_gateway: '{{ iscsi_gateway }}', ip_address: '{{ iscsib_ip }}', subnet_mask: '{{ iscsi_subnet }}'}
      - { dvswitch_name: '{{ vds_name }}', portgroup_name: '{{ vMotion_portgroup_name }}', default_gateway: '{{ vmotion_gateway }}', ip_address: '{{ vmotion_ip }}', subnet_mask: '{{ vmotion_subnet }}'}
    when:
      - state == "present"
      - switch_type == "vds"


  - name: Enable iSCSI on {{ esxi_hostname }}
    community.vmware.vmware_host_iscsi:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      state: enabled
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    when: state == "present"

  - name: Gather iSCSI configuration information of ESXi host
    community.vmware.vmware_host_iscsi_info:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    register: iscsi_info
    #when: state == "present"

  - name: Add VMKernels to iSCSI config of ESXi
    community.vmware.vmware_host_iscsi:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      iscsi_config:
        vmhba_name: "{{ iscsi_info.iscsi_properties.vmhba_name }}"
        port_bind:
          - vmk1
          - vmk2
      state: present
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    when:
      - state == "present"


  - name: Remove VMware vSwitch on {{ esxi_hostname }} for VSS
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: "{{ item.switch_name }}"
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    loop:
      - { switch_name: '{{ iscsi_vswitch }}' }
      - { switch_name: '{{ vm_vswitch }}' }
    delegate_to: localhost
    when:
      - state == "absent"
      - iscsi_vswitch != "vSwitch0"
      - switch_type == "vss"
      - number_of_host_uplinks == 6


  - debug: msg=" PAUSE> Do not continue until after removing 2nd vmnic manually. automation not working"
    when:
      - state == "absent"
      - switch_type == "vss"
  - pause:
    when:
      - state == "absent"
      - switch_type == "vss"

  - name: Remove {{ esxi_hostname }} from vCenter
    community.vmware.vmware_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: "{{ datacenter_name }}"
      cluster: "{{ cluster_name }}"
      esxi_hostname: '{{ esxi_hostname }}'
      esxi_username: '{{ esxi_username }}'
      esxi_password: '{{ esxi_password }}'
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: "{{ state | default(present) }}"
    delegate_to: localhost
    when:
      - state == "absent"



  #- name: Rescan HBA's for a given ESXi host and refresh storage system objects
  #  community.vmware.vmware_host_scanhba:
  #    hostname: '{{ vcenter_hostname }}'
  #    username: '{{ vcenter_username }}'
  #    password: '{{ vcenter_password }}'
  #    esxi_hostname: '{{ esxi_hostname }}'
  #    refresh_storage: true
  #    validate_certs: "{{ validate_vm_certs | default(no) }}"
  #  delegate_to: localhost
  #  when:
  #    - state == "present"


  #- name: Delete Cluster
  #  community.vmware.vmware_cluster:
  #     hostname: "{{ vcenter_hostname }}"
  #     username: "{{ vcenter_username }}"
  #     password: "{{ vcenter_password }}"
  #     datacenter_name: "{{ datacenter_name }}"
  #     cluster_name: cluster
  #     enable_ha: true
  #     enable_drs: true
  #     enable_vsan: true
  #     state: absent
  #  delegate_to: localhost
  #  when:
  #    - state == "absent"
  #    - DESTRUCTION_MODE is defined




  #- name: Delete Datacenter
  #  community.vmware.vmware_datacenter:
  #    hostname: '{{ vcenter_hostname }}'
  #    username: '{{ vcenter_username }}'
  #    password: '{{ vcenter_password }}'
  #    datacenter_name: '{{ datacenter_name }}'
  #    state: absent
  #  delegate_to: localhost
  #  register: datacenter_delete_result
  #  when:
  #    - state == "absent"
  #    - DESTRUCTION_MODE is defined
  #- debug: msg=" PAUSE> Starting SolidFire setup. For subsequent datastores adds or removes use ansible-kp-connect-sf-to-vmware.yml"

  #- pause:


  - name: Create New Account
    na_elementsw_account:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state | default(present) }}"
       element_username: "{{ account }}"
    register: accountstatus
    when:
      - state == "present"


  - name: Get Account Info
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: "{{ validate_sf_certs | default(False) }}"
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "GetAccountByName","params": {"username": "{{ account }}"},"id": 2112}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: jsonAccountResults
  #- debug: msg="results printed are {{ jsonAccountResults.json }}"


  - name: Set account ID variable and the volumes that reside within the account
    set_fact:
      account_id={{jsonAccountResults.json.result.account.accountID}}
      VolsInAcc={{jsonAccountResults.json.result.account.volumes}}
    when:
      - jsonAccountResults.json.error is not defined

  - name: Create or remove data volume
    na_elementsw_volume:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state | default(present) }}"
       name: "{{ volname }}"
       qos: {minIOPS: "{{ min | default(1000) }}", maxIOPS: "{{ max | default(10000) }}", burstIOPS: "{{ burst | default(100000) }}"}
       account_id: "{{ account }}"
       size: "{{ volsize | default(2048) }}"
       size_unit: gb
       enable512e: True
    register: volumes
  - debug: msg="vol name is {{ volname }}"



  - name: get volume ID and SCSI ID
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: "{{ validate_sf_certs | default(False) }}"
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "ListVolumes","params": {"volumeName": "{{ volname }}", "volumeStatus": "active" },"id": 1}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: volResults
  - set_fact:
      volscsiID: "{{ volResults.json.result.volumes | map(attribute='scsiNAADeviceID') | list }}"
      volID: "{{ volResults.json.result.volumes | map(attribute='volumeID') | list }}"
  - debug: msg="vol scsi ID is {{ volscsiID[0] }} and volID is {{ volID }}"
    when: state == "present"


  - name: Create Access group
    na_elementsw_access_group:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state | default(present) }}"
       name: "{{ accessgroup }}"
       account_id: "{{ account }}"
    register: results
    when: state == "present"


  - name: Get List of all Access group IDs
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: "{{ validate_sf_certs | default(False) }}"
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "ListVolumeAccessGroups","params": {} ,"id": 2112}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: jsonVolAccResults


  - name: Set Volume Access Groups ID for  "{{ accessgroup }}"
    set_fact:
       VolAccGrpID: "{{ item.volumeAccessGroupID }}"
       VolsInAccGrp: "{{ item.volumes }}"
    loop: "{{ jsonVolAccResults.json.result.volumeAccessGroups }}"
    loop_control:
      label: "working on: {{ item.name }}"
    when:
      - item.name == accessgroup



  - name: Remove Access Group "{{accessgroup }}" if empty
    na_elementsw_access_group:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state | default(present) }}"
       name: "{{ accessgroup }}"
       account_id: "{{ account }}"
    register: results
    when:
      - state == "absent"
      - VolsInAccGrp | length == 0


  - name: Delete Account "{{ account }}" if empty
    na_elementsw_account:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state | default(present) }}"
       element_username: "{{ account }}"
    when:
      - state == "absent"
      - VolsInAcc | length == 0


  - name: Set Volume Access Group
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: "{{ validate_sf_certs | default(False) }}"
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "AddVolumesToVolumeAccessGroup","params": {"volumeAccessGroupID": "{{ VolAccGrpID }}","volumes": {{ volID }} } ,"id": 2112}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    when:
       - state == "present"
       - VolAccGrpID is defined

  #- pause:

  #- name: Gather iSCSI configuration information of ESXi host
  #  community.vmware.vmware_host_iscsi_info:
  #    hostname: "{{ vcenter_hostname }}"
  #    username: "{{ vcenter_username }}"
  #    password: "{{ vcenter_password }}"
  #    esxi_hostname: "{{ esxi_hostname }}"
  #    validate_certs: "{{ validate_vm_certs | default(no) }}"
  #  register: iscsi_info
    #when: state == "present"
  #- debug: msg=" {{ iscsi_info.iscsi_properties.iscsi_name }}"
  #- debug: msg=" {{ iscsi_info.iscsi_properties.vmhba_name }}"


  - name: Add Inititator to Access Group
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: "{{ validate_sf_certs | default(False) }}"
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "AddInitiatorsToVolumeAccessGroup", "params": {"volumeAccessGroupID": "{{ VolAccGrpID }}", "initiators": ["{{ iscsi_info.iscsi_properties.iscsi_name }}"]}, "id" : 2112}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: jsonagupdateResults
    #with_items: "{{ hostIQN }}"
    when:
       - VolAccGrpID is defined
       - state == "present"

  - name: Add a dynamic target to iSCSI config of ESXi
    community.vmware.vmware_host_iscsi:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      iscsi_config:
        vmhba_name: "{{ iscsi_info.iscsi_properties.vmhba_name }}"
        send_target:
          address: "{{ send_target_address }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: present
    when: state == "present"


  #- pause:

  - name: Rescan HBA's for a given ESXi host and refresh storage system objects
    community.vmware.vmware_host_scanhba:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      refresh_storage: true
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when: state == "present"


  - name: Mount VMFS datastores to ESXi
    vmware_host_datastore:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datastore_name: '{{ volname }}'
      datastore_type: 'vmfs'
      vmfs_device_name: 'naa.{{ volscsiID[0] }}'
      vmfs_version: 6
      esxi_hostname: '{{ esxi_hostname }}'
      state: "{{ state | default(present) }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when: state == "present"
