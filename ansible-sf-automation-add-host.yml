---
- hosts: localhost
  vars_files:
  - '.secrets.yml'
  - 'ansible-sf-automation-vars.yml'

  collections:
    - netapp.elementsw
    - community.vmware



  vars:
    #for 6 cables, these should be vSwitch1 and vSwitch2, for testing I am using just vSwitch0 for everything
    vm_vswitch: vSwitch0
    iscsi_vswitch: vSwitch0
    #vm_vswitch: vSwitch1
    #iscsi_vswitch: vSwitch2


    state: present

    #runtasks and create_destroy_dc_cluster are used to allow me to easily run specific tasks for troubleshooting. comment it out to not run these tasks
    #runtasks: definedifuncommented
    #create_destroy_dc_cluster: definedifuncommented

    #add_additional_management is commented out to not run it. If you want to add an additional management port group remove the #
    #add_additional_mannagement: definedifuncommented

    #sixnics is commented out as I do not have a 6-cable config. If you have 6 x nics to test, leave this uncommented by removing the #
    #sixnics: definedifuncommented_uncomment_if_you_have_6_nics enabled to add VMkerenel port binding
    #rescan: uncomment_if_you_want_a_rescan


  tasks:
  - name: Login into vCenter
    uri:
      url: https://{{ vcenter_hostname }}/rest/com/vmware/cis/session
      force_basic_auth: yes
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      method: POST
      user: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
    register: login



  - name: Create Datacenter
    community.vmware.vmware_datacenter:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter_name }}'
      state: "{{ state | default(present) }}"
    delegate_to: localhost
    register: datacenter_create_result
    when:
      - state == "present"




  - name: Create Cluster with additional changes
    community.vmware.vmware_cluster:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter_name: "{{ datacenter_name }}"
      cluster_name: "{{ cluster_name }}"
      #enable_ha: True
      #ha_vm_monitoring: vmMonitoringOnly
      #enable_drs: True
      #drs_default_vm_behavior: fullyAutomated
      #enable_vsan: False
    register: cl_result
    delegate_to: localhost
    when:
      - state == "present"



  - name: Add ESXi Host to vCenter
    community.vmware.vmware_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: "{{ datacenter_name }}"
      cluster: "{{ cluster_name }}"
      esxi_hostname: '{{ esxi_hostname }}'
      esxi_username: '{{ esxi_username }}'
      esxi_password: '{{ esxi_password }}'
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: "{{ state | default(present) }}"
    delegate_to: localhost
    when:
      - state == "present"

  - name: Add 2nd NIC to vSwitch0
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch0
      nics:
        - vmnic0
        - vmnic1
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"


  - name: Remove VM Network from vSwitch0
    community.vmware.vmware_portgroup:
      hostname: "{{ esxi_hostname }}"
      username: "{{ esxi_username }}"
      password: "{{ esxi_password }}"
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch0
      portgroup: "VM Network"
      state: absent
    delegate_to: localhost
    when:
      - state == "present"


  - name: Remove Management Network VM Portgroup from vSwitch0
    community.vmware.vmware_portgroup:
      hostname: "{{ esxi_hostname }}"
      username: "{{ esxi_username }}"
      password: "{{ esxi_password }}"
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch0
      portgroup: "{{ management_portgroup_name }}"
      vlan_id: "{{ management_vlan_id }}"
      state: absent
    delegate_to: localhost
    when:


    # Pause until you can verify updates to an application were successful.
  #- pause:

  #starting to add tasks

  - name: Add Management Network VM Portgroup
    community.vmware.vmware_portgroup:
      hostname: "{{ esxi_hostname }}"
      username: "{{ esxi_username }}"
      password: "{{ esxi_password }}"
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch0
      portgroup: "{{ management_portgroup_name }}"
      vlan_id: "{{ management_vlan_id }}"
    delegate_to: localhost
    when:
      - state == "present"

      - add_additional_mannagement is defined

  - name: Add VMware vSwitch1 on {{ esxi_hostname }}
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch1
      #nics:
      #  - '{{ vswitch1_uplink1 }}'
      #  - '{{ vswitch1_uplink2 }}'
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"


  - name: Add or remove VM_Network port group to vSwitch1 on {{ esxi_hostname }}
    community.vmware.vmware_portgroup:
      hostname: "{{ esxi_hostname }}"
      username: "{{ esxi_username }}"
      password: "{{ esxi_password }}"
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch1
      portgroup: "{{ VM_network_portgroup_name }}"
      vlan_id: "{{ VM_network_vlan_id }}"
    delegate_to: localhost
    when:

    #when: state == "present"


  - name: Remove VMware vSwitch1 on {{ esxi_hostname }}
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch1
      #nics:
      #  - '{{ vswitch2_uplink1 }}'
      #  - '{{ vswitch2_uplink2 }}'
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "absent"


  - name: Add VMware vSwitch2 on {{ esxi_hostname }}
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch2
      #nics:
      #  - vmnic3
      #  - vmnic4
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"


  - name: Add or remove iSCSI-A port group to {{ iscsi_vswitch }}
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ iscsi_vswitch }}"
      portgroup: "{{ iscsia_portgroup_name }}"
      vlan_id: "{{ iscsi_vlan_id }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      security:
        promiscuous_mode: False
        mac_changes: False
        forged_transmits: False
      teaming:
        #load_balancing: failover_explicit
        network_failure_detection: link_status_only
        notify_switches: true
        failback: true
        active_adapters:
            - "{{ vswitch2_uplink2 }}"
    register: teaming_result
    delegate_to: localhost
    when:



  - name: Add iSCSI-A vmkernel port using static network type
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ iscsi_vswitch }}"
      portgroup_name: '{{ iscsia_portgroup_name }}'
      mtu: 9000
      network:
        type: 'static'
        default_gateway: "{{ iscsi_gateway }}"
        ip_address: '{{ iscsia_ip }}'
        subnet_mask: '{{ iscsi_subnet }}'
      state: present
    delegate_to: localhost
    when:
      - state == "present"



  - name: Add or remove iSCSI-B port group to {{ iscsi_vswitch }}
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ iscsi_vswitch }}"
      portgroup: "{{ iscsib_portgroup_name }}"
      vlan_id: "{{ iscsi_vlan_id }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      security:
        promiscuous_mode: False
        mac_changes: False
        forged_transmits: False
      teaming:
        #load_balancing: failover_explicit
        network_failure_detection: link_status_only
        notify_switches: true
        failback: true
        active_adapters:
          - "{{ vswitch2_uplink1 }}"
    register: teaming_result
    delegate_to: localhost
    when:



  - name: Add iSCSI-B vmkernel port using static network type
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ iscsi_vswitch }}"
      portgroup_name: '{{ iscsib_portgroup_name }}'
      mtu: 9000
      network:
        type: 'static'
        default_gateway: "{{ iscsi_gateway }}"
        ip_address: '{{ iscsib_ip }}'
        subnet_mask: '{{ iscsi_subnet }}'
      state: present
    delegate_to: localhost
    when:
      - state == "present"



  - name: Add or remove vMotion port group to {{ vm_vswitch }}
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ vm_vswitch }}"
      portgroup: "{{ vMotion_portgroup_name }}"
      vlan_id: "{{ vMotion_vlan_id }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      security:
        promiscuous_mode: False
        mac_changes: False
        forged_transmits: False
      traffic_shaping:
        enabled: True
        average_bandwidth: 1000000
        peak_bandwidth: 1200000
        burst_size: 64000
      teaming:
        network_failure_detection: link_status_only
        notify_switches: true
        failback: true
        active_adapters:
          - "{{ vswitch1_uplink2 }}"
          - "{{ vswitch1_uplink1 }}"
    register: teaming_result
    delegate_to: localhost
    when:


  - name: Add vMotion vmkernel port using static network type
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ vm_vswitch }}"
      portgroup_name: '{{ vMotion_portgroup_name }}'
      mtu: 9000
      enable_vmotion: yes
      network:
        type: 'static'
        default_gateway: "{{ vmotion_gateway }}"
        ip_address: '{{ vmotion_ip }}'
        subnet_mask: '{{ vmotion_subnet }}'
      state: '{{ state | default(present) }}'
    delegate_to: localhost
    when:
      - state == "present"


  - name: Enable iSCSI on {{ esxi_hostname }}
    community.vmware.vmware_host_iscsi:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      state: enabled

  - name: Add VMKernels to iSCSI config of ESXi
    community.vmware.vmware_host_iscsi:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      iscsi_config:
        vmhba_name: "{{ vmhba }}"
        port_bind:
          - vmk1
          - vmk2
      state: present
    when:
      - state == "present"

  - name: Remove VMware {{ iscsi_vswitch }} on {{ esxi_hostname }}
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: "{{ iscsi_vswitch }}"
      #nics:
      #  - vmnic3
      #  - vmnic4
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "absent"


  - name: Remove {{ esxi_hostname }} from vCenter
    community.vmware.vmware_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: "{{ datacenter_name }}"
      cluster: "{{ cluster_name }}"
      esxi_hostname: '{{ esxi_hostname }}'
      esxi_username: '{{ esxi_username }}'
      esxi_password: '{{ esxi_password }}'
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: "{{ state | default(present) }}"
    delegate_to: localhost
    when:
      - state == "absent"



  - name: Rescan HBA's for a given ESXi host and refresh storage system objects
    community.vmware.vmware_host_scanhba:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      refresh_storage: true
    delegate_to: localhost
    when:
      - state == "present"


  - name: Delete Cluster
    community.vmware.vmware_cluster:
       hostname: "{{ vcenter_hostname }}"
       username: "{{ vcenter_username }}"
       password: "{{ vcenter_password }}"
       datacenter_name: "{{ datacenter_name }}"
       cluster_name: cluster
       enable_ha: true
       enable_drs: true
       enable_vsan: true
       state: absent
    delegate_to: localhost
    when:
      - state == "absent"
      - DESTRUCTION_MODE is defined



  - name: Delete Datacenter
    community.vmware.vmware_datacenter:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter_name }}'
      state: absent
    delegate_to: localhost
    register: datacenter_delete_result
    when:
      - state == "absent"
      - DESTRUCTION_MODE is defined
