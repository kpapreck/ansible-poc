---
- hosts: localhost
  vars_files:
  - '.secrets.yml'
  - 'ansible-kp-automation-vars.yml'

  collections:
    - netapp.elementsw
    - community.vmware



  vars:
    state: present
    #runme: yes



  tasks:
  - name: Define additional vSwitch variables if using 2-cable VSS
    set_fact:
      vm_vswitch: vSwitch0
      iscsi_vswitch: vSwitch0
      vswitch2_uplink1: "{{ vswitch0_uplink1 }}"
      vswitch2_uplink2: "{{ vswitch0_uplink2 }}"
      vswitch1_uplink1: "{{ vswitch0_uplink1 }}"
      vswitch1_uplink2: "{{ vswitch0_uplink2 }}"
    when:
      - number_of_host_uplinks == 2
      - switch_type == "vss"

  - name: Define additional vSwitch variables if using 6-cable VSS
    set_fact:
      vm_vswitch: vSwitch1
      iscsi_vswitch: vSwitch2
    when:
      - number_of_host_uplinks == 6
      - switch_type == "vss"

  - name: Define additional vSwitch variables if using 2-cable VDS
    set_fact:
      vm_vswitch: "{{ vds_name }}"
      iscsi_vswitch: "{{ vds_name }}"
      vswitch2_uplink1: "{{ vswitch0_uplink1 }}"
      vswitch2_uplink2: "{{ vswitch0_uplink2 }}"
      vswitch1_uplink1: "{{ vswitch0_uplink1 }}"
      vswitch1_uplink2: "{{ vswitch0_uplink2 }}"
    when:
      - number_of_host_uplinks == 2
      - switch_type == "vds"



  - name: Login into vCenter
    uri:
      url: https://{{ vcenter_hostname }}/rest/com/vmware/cis/session
      force_basic_auth: yes
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      method: POST
      user: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
    register: login



  - name: Create Datacenter
    community.vmware.vmware_datacenter:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter_name }}'
      state: "{{ state | default(present) }}"
    delegate_to: localhost
    register: datacenter_create_result
    when:
      - state == "present"
      - runme is defined




  - name: Create Cluster
    community.vmware.vmware_cluster:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter_name: "{{ datacenter_name }}"
      cluster_name: "{{ cluster_name }}"
    register: cl_result
    delegate_to: localhost
    when:
      - state == "present"
      - runme is defined

  - name: Enable HA and VM monitoring without admission control
    community.vmware.vmware_cluster_ha:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: "{{ datacenter_name }}"
      cluster_name: "{{ cluster_name }}"
      enable_ha: true
      ha_vm_monitoring: vmMonitoringOnly
    delegate_to: localhost
    when:
      - runme is defined

  - name: Enable DRS and set default VM behavior to fully automated
    community.vmware.vmware_cluster_drs:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter_name: "{{ datacenter_name }}"
      cluster_name: "{{ cluster_name }}"
      enable_drs: True
      drs_default_vm_behavior: fullyAutomated
    delegate_to: localhost
    when:
      - runme is defined


  - name: Add ESXi Host to vCenter
    community.vmware.vmware_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: "{{ datacenter_name }}"
      cluster: "{{ cluster_name }}"
      esxi_hostname: '{{ esxi_hostname }}'
      esxi_username: '{{ esxi_username }}'
      esxi_password: '{{ esxi_password }}'
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: "{{ state | default(present) }}"
    delegate_to: localhost
    when:
      - state == "present"
      - runme is defined
  #- pause:

  - name: Add 2nd NIC to vSwitch0
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch0
      nics:
        - '{{ vswitch0_uplink1 }}'
        - '{{ vswitch0_uplink2 }}'
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vss"
      - runme is defined

  - name: Create VDS switch
    community.vmware.vmware_dvswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: '{{ datacenter_name }}'
      switch: "{{ vds_name }}"
      version: 6.5.0
      mtu: 9000
      uplink_quantity: 2
      uplink_prefix: 'Uplink_'
      discovery_protocol: lldp
      discovery_operation: both
      multicast_filtering_mode: basic
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: present
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - runme is defined

  - name: Create management VDS portgroup
    community.vmware.vmware_dvs_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      portgroup_name: "{{ vds_management_portgroup_name }}"
      switch_name: "{{ vds_name }}"
      vlan_id: "{{ vds_management_vlan_id }}"
      num_ports: 120
      portgroup_type: earlyBinding
      state: present
      port_policy:
        block_override: true
        vlan_override: true
        security_override: true
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - runme is defined

  - name: Create VM_Network VDS portgroup
    community.vmware.vmware_dvs_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      portgroup_name: "{{ VM_network_portgroup_name }}"
      switch_name: "{{ vds_name }}"
      vlan_id: "{{ VM_network_vlan_id }}"
      num_ports: 120
      portgroup_type: earlyBinding
      state: present
      port_policy:
        block_override: true
        vlan_override: true
        security_override: true
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - runme is defined


  - name: Create vMotion VDS portgroup
    community.vmware.vmware_dvs_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      portgroup_name: "{{ vMotion_portgroup_name }}"
      switch_name: "{{ vds_name }}"
      vlan_id: "{{ vMotion_vlan_id }}"
      num_ports: 120
      portgroup_type: earlyBinding
      state: present
      port_policy:
        block_override: true
        vlan_override: true
        security_override: true
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - runme is defined

  - name: Create iSCSI-A VDS portgroup
    community.vmware.vmware_dvs_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      portgroup_name: "{{ iscsia_portgroup_name }}"
      switch_name: "{{ vds_name }}"
      vlan_id: "{{ iscsi_vlan_id }}"
      num_ports: 120
      portgroup_type: earlyBinding
      state: present
      port_policy:
        block_override: true
        vlan_override: true
        security_override: true
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - runme is defined


  - name: Create iSCSI-B VDS portgroup
    community.vmware.vmware_dvs_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      portgroup_name: "{{ iscsib_portgroup_name }}"
      switch_name: "{{ vds_name }}"
      vlan_id: "{{ iscsi_vlan_id }}"
      num_ports: 120
      portgroup_type: earlyBinding
      state: present
      port_policy:
        block_override: true
        vlan_override: true
        security_override: true
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - runme is defined

  - name: Add Host to dVS
    community.vmware.vmware_dvs_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: "{{ vds_name }}"
      vmnics:
        - "{{ vswitch0_uplink2 }}"
      state: present
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    #when:
    #  - runme is defined

  - name: Migrate Management vmk0 to VDS
    community.vmware.vmware_migrate_vmk:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      device: vmk0
      current_switch_name: vSwitch0
      current_portgroup_name: Management Network
      migrate_switch_name: "{{ vds_name }}"
      migrate_portgroup_name: Management Network
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - runme is defined

  - name: Add VMware vSwitch0 for cleanup adding back in vmnic0
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch0
      state: present
      mtu: 9000
      nics:
        - '{{ vswitch0_uplink1 | default(vmnic0) }}'
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "absent"
      - switch_type == "vds"

  #- name: Remove Management Network VM Portgroup for cleanup
  #  community.vmware.vmware_portgroup:
  #    hostname: '{{ vcenter_hostname }}'
  #    username: '{{ vcenter_username }}'
  #    password: '{{ vcenter_password }}'
  #    esxi_hostname: '{{ esxi_hostname }}'
  #    switch: vSwitch0
  #    portgroup: "Management Network"
  #    #vlan_id: "{{ vds_management_vlan_id }}"
  #    state: absent
  #  delegate_to: localhost
  #  when:
  #    - state == "absent"
  #    - switch_type == "vds"
#
  - pause:
    when: state == "absent"

#do a manual migration at this point. you need to do it manually.

#need to add here to then remove the other VMKs...
#then should be able to remove switch

#cannot migrate from VDS to VSS ansible

  - name: Delete VMkernel port
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      dvswitch_name: '{{ vds_name }}'
      portgroup_name: '{{ vMotion_portgroup_name }}'
      device: vmk3
      state: absent
    delegate_to: localhost
    when: state == "absent"

  - name: Delete VMkernel port
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      dvswitch_name: '{{ vds_name }}'
      portgroup_name: '{{ iscsia_portgroup_name }}'
      device: vmk1
      state: absent

    delegate_to: localhost
    when: state == "absent"

  - name: Delete VMkernel port
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      dvswitch_name: '{{ vds_name }}'
      portgroup_name: '{{ iscsib_portgroup_name }}'
      device: vmk2
      state: absent
    delegate_to: localhost
    when: state == "absent"


  - name: Delete dvSwitch
    community.vmware.vmware_dvswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: '{{ datacenter_name }}'
      switch: dvSwitch
      state: absent
    delegate_to: localhost
    when:
      - state == "absent"



  - name: Remove VMware vSwitch0
    community.vmware.vmware_vswitch:
      hostname: '{{ esxi_hostname }}'
      username: '{{ esxi_username }}'
      password: '{{ esxi_password }}'
      switch: vSwitch0
      nics: "{{ vswitch0_uplink1 }}"
      state: absent
      #mtu: 9000
    delegate_to: localhost
    when:
      - switch_type == "vds"
      - state == "present"
      - runme is defined

  - name: Add Host to dVS
    community.vmware.vmware_dvs_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: "{{ vds_name }}"
      vmnics:
        - "{{ vswitch0_uplink2 }}"
        - "{{ vswitch0_uplink1 }}"
      state: present
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - runme is defined
      - state == "present"


  - name: Remove VM Network from vSwitch0
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch0
      portgroup: "VM Network"
      state: absent
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vss"



  - name: Remove Management Network VM Portgroup from vSwitch0
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch0
      portgroup: "{{ management_portgroup_name }}"
      vlan_id: "{{ management_vlan_id }}"
      state: absent
    delegate_to: localhost
    when:
      - management_portgroup_name is defined
      - switch_type == "vss"



  - name: Add Management Network VM Portgroup
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: vSwitch0
      portgroup: "{{ management_portgroup_name }}"
      vlan_id: "{{ management_vlan_id }}"
    delegate_to: localhost
    when:
      - state == "present"
      - management_portgroup_name is defined
      - switch_type == "vss"

  - name: Add VMware vSwitch1 on {{ esxi_hostname }}
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch1
      nics:
        - '{{ vswitch1_uplink1 | default(vmnic2) }}'
        - '{{ vswitch1_uplink2 | default(vmnic3) }}'
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"
      - number_of_host_uplinks == 6
      - switch_type == "vss"


  - name: Add or remove VM_Network port group to {{ vm_vswitch }} on {{ esxi_hostname }}
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ vm_vswitch }}"
      portgroup: "{{ VM_network_portgroup_name }}"
      vlan_id: "{{ VM_network_vlan_id }}"
      state: "{{ state }}"
    delegate_to: localhost
    when:
      - switch_type == "vss"



  - name: Remove VMware vSwitch1 on {{ esxi_hostname }}
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch1
      nics:
        - '{{ vswitch1_uplink1 | default(vmnic2) }}'
        - '{{ vswitch1_uplink2 | default(vmnic3) }}'
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: absent
    delegate_to: localhost
    when:
      - state == "absent"
      - number_of_host_uplinks == 6
      - switch_type == "vss"


  - name: Add VMware vSwitch2 on {{ esxi_hostname }}
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: vSwitch2
      nics:
        - '{{ vswitch2_uplink1 | default(vmnic4) }}'
        - '{{ vswitch2_uplink2 | default(vmnic5) }}'
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "present"
      - number_of_host_uplinks == 6
      - switch_type == "vss"

  - name: Delete iSCSI-A vmkernel port
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ iscsi_vswitch }}"
      portgroup_name: '{{ iscsia_portgroup_name }}'
      device: vmk1
      state: "{{ state }}"
    delegate_to: localhost
    when:
      - state == "absent"

  - name: Delete iSCSI-B vmkernel port
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ iscsi_vswitch }}"
      portgroup_name: '{{ iscsib_portgroup_name }}'
      device: vmk2
      state: "{{ state }}"
    delegate_to: localhost
    when:
      - state == "absent"

  - name: Delete vMotion vmkernel port
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ iscsi_vswitch }}"
      portgroup_name: '{{ iscsib_portgroup_name }}'
      device: vmk3
      state: "{{ state }}"
    delegate_to: localhost
    when:
      - state == "absent"

  - name: Add or Remove iSCSI-A port group to VSS
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ iscsi_vswitch }}"
      portgroup: "{{ iscsia_portgroup_name }}"
      vlan_id: "{{ iscsi_vlan_id }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: "{{ state }}"
      security:
        promiscuous_mode: False
        mac_changes: False
        forged_transmits: False
      teaming:
        #load_balancing: failover_explicit
        network_failure_detection: link_status_only
        notify_switches: true
        failback: true
        active_adapters:
            - "{{ vswitch2_uplink2 }}"
    register: teaming_result
    delegate_to: localhost
    when: switch_type == "vss"


  - name: Add iSCSI-A vmkernel port using static network type to VSS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ iscsi_vswitch }}"
      portgroup_name: '{{ iscsia_portgroup_name }}'
      mtu: 9000
      network:
        type: 'static'
        default_gateway: "{{ iscsi_gateway }}"
        ip_address: '{{ iscsia_ip }}'
        subnet_mask: '{{ iscsi_subnet }}'
      state: "{{ state }}"
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vss"

  - name: Add iSCSI-A vmkernel port using static network type to VDS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      dvswitch_name: "{{ vds_name }}"
      portgroup_name: '{{ iscsia_portgroup_name }}'
      mtu: 9000
      network:
        type: 'static'
        default_gateway: "{{ iscsi_gateway }}"
        ip_address: '{{ iscsia_ip }}'
        subnet_mask: '{{ iscsi_subnet }}'
      state: "{{ state }}"
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vds"


  - name: Add or remove iSCSI-B port group to VSS
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ iscsi_vswitch }}"
      portgroup: "{{ iscsib_portgroup_name }}"
      vlan_id: "{{ iscsi_vlan_id }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      security:
        promiscuous_mode: False
        mac_changes: False
        forged_transmits: False
      teaming:
        #load_balancing: failover_explicit
        network_failure_detection: link_status_only
        notify_switches: true
        failback: true
        active_adapters:
          - "{{ vswitch2_uplink1 }}"
      state: "{{ state }}"
    register: teaming_result
    delegate_to: localhost
    when:
      - switch_type == "vss"



  - name: Add iSCSI-B vmkernel port using static network type to VSS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ iscsi_vswitch }}"
      portgroup_name: '{{ iscsib_portgroup_name }}'
      mtu: 9000
      network:
        type: 'static'
        default_gateway: "{{ iscsi_gateway }}"
        ip_address: '{{ iscsib_ip }}'
        subnet_mask: '{{ iscsi_subnet }}'
      state: "{{ state }}"
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vss"

  - name: Add iSCSI-B vmkernel port using static network type to VDS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      dvswitch_name: "{{ vds_name }}"
      portgroup_name: '{{ iscsib_portgroup_name }}'
      mtu: 9000
      network:
        type: 'static'
        default_gateway: "{{ iscsi_gateway }}"
        ip_address: '{{ iscsib_ip }}'
        subnet_mask: '{{ iscsi_subnet }}'
      state: "{{ state }}"
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vds"


  - name: Add or remove vMotion port group to VSS
    community.vmware.vmware_portgroup:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch: "{{ vm_vswitch }}"
      portgroup: "{{ vMotion_portgroup_name }}"
      vlan_id: "{{ vMotion_vlan_id }}"
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      security:
        promiscuous_mode: False
        mac_changes: False
        forged_transmits: False
      traffic_shaping:
        enabled: True
        average_bandwidth: 1000000
        peak_bandwidth: 1200000
        burst_size: 64000
      teaming:
        network_failure_detection: link_status_only
        notify_switches: true
        failback: true
        active_adapters:
          - "{{ vswitch1_uplink2 }}"
          - "{{ vswitch1_uplink1 }}"
      state: "{{ state }}"
    register: teaming_result
    delegate_to: localhost
    when:
      - switch_type == "vss"


  - name: Add vMotion vmkernel port using static network type to VSS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      vswitch_name: "{{ vm_vswitch }}"
      portgroup_name: '{{ vMotion_portgroup_name }}'
      mtu: 9000
      enable_vmotion: yes
      network:
        type: 'static'
        default_gateway: "{{ vmotion_gateway }}"
        ip_address: '{{ vmotion_ip }}'
        subnet_mask: '{{ vmotion_subnet }}'
      state: '{{ state | default(present) }}'
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vss"

  - name: Add vMotion vmkernel port using static network type to VDS
    community.vmware.vmware_vmkernel:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      dvswitch_name: "{{ vds_name }}"
      portgroup_name: '{{ vMotion_portgroup_name }}'
      mtu: 9000
      enable_vmotion: yes
      network:
        type: 'static'
        default_gateway: "{{ vmotion_gateway }}"
        ip_address: '{{ vmotion_ip }}'
        subnet_mask: '{{ vmotion_subnet }}'
      state: '{{ state | default(present) }}'
    delegate_to: localhost
    when:
      - state == "present"
      - switch_type == "vds"


  - name: Enable iSCSI on {{ esxi_hostname }}
    community.vmware.vmware_host_iscsi:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      state: enabled

  - name: Gather iSCSI configuration information of ESXi host
    community.vmware.vmware_host_iscsi_info:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
    register: iscsi_info

  - name: Add VMKernels to iSCSI config of ESXi
    community.vmware.vmware_host_iscsi:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      iscsi_config:
        vmhba_name: "{{ iscsi_info.iscsi_properties.vmhba_name }}"
        port_bind:
          - vmk1
          - vmk2
      state: present
    when:
      - state == "present"

  #- pause:


  - name: Remove VMware {{ iscsi_vswitch }} on {{ esxi_hostname }}
    community.vmware.vmware_vswitch:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      switch_name: "{{ iscsi_vswitch }}"
      #nics:
      #  - vmnic3
      #  - vmnic4
      mtu: 9000
      validate_certs: "{{ validate_vm_certs | default(no) }}"
    delegate_to: localhost
    when:
      - state == "absent"
      - iscsi_vswitch != "vSwitch0"
      - switch_type == "vss"



  - name: Remove {{ esxi_hostname }} from vCenter
    community.vmware.vmware_host:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter: "{{ datacenter_name }}"
      cluster: "{{ cluster_name }}"
      esxi_hostname: '{{ esxi_hostname }}'
      esxi_username: '{{ esxi_username }}'
      esxi_password: '{{ esxi_password }}'
      validate_certs: "{{ validate_vm_certs | default(no) }}"
      state: "{{ state | default(present) }}"
    delegate_to: localhost
    when:
      - state == "absent"



  - name: Rescan HBA's for a given ESXi host and refresh storage system objects
    community.vmware.vmware_host_scanhba:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      refresh_storage: true
    delegate_to: localhost
    when:
      - state == "present"


  #- name: Delete Cluster
  #  community.vmware.vmware_cluster:
  #     hostname: "{{ vcenter_hostname }}"
  #     username: "{{ vcenter_username }}"
  #     password: "{{ vcenter_password }}"
  #     datacenter_name: "{{ datacenter_name }}"
  #     cluster_name: cluster
  #     enable_ha: true
  #     enable_drs: true
  #     enable_vsan: true
  #     state: absent
  #  delegate_to: localhost
  #  when:
  #    - state == "absent"
  #    - DESTRUCTION_MODE is defined




  #- name: Delete Datacenter
  #  community.vmware.vmware_datacenter:
  #    hostname: '{{ vcenter_hostname }}'
  #    username: '{{ vcenter_username }}'
  #    password: '{{ vcenter_password }}'
  #    datacenter_name: '{{ datacenter_name }}'
  #    state: absent
  #  delegate_to: localhost
  #  register: datacenter_delete_result
  #  when:
  #    - state == "absent"
  #    - DESTRUCTION_MODE is defined
