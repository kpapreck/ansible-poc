---
- hosts: localhost
  vars_files:
  - '.secrets.yml'
  - 'ansible-sf-automation-vars.yml'

  collections:
    - netapp.elementsw
    - community.vmware



  vars:
    sf_url: "https://{{ elementsw_hostname }}/json-rpc/11.0/"
    item: "{{ volname }}"
    state: present
    #runtasks: uncomment_to_run_these_tasks




  tasks:
  - name: Login into vCenter
    uri:
      url: https://{{ vcenter_hostname }}/rest/com/vmware/cis/session
      force_basic_auth: yes
      validate_certs: no
      method: POST
      user: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
    register: login
    when: runtasks is defined

  - name: Create New Account "{{ account }}"
    na_elementsw_account:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state }}"
       element_username: "{{ account }}"
       initiator_secret: "{{ secret }}"
    when:
      - state == "present"
      - runtasks is defined


  - name: Get Account Info
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: False
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "GetAccountByName","params": {"username": "{{ account }}"},"id": 2112}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: jsonAccountResults
  - set_fact:
      account_id={{jsonAccountResults.json.result.account.accountID}}
      VolsInAcc={{jsonAccountResults.json.result.account.volumes}}


  - name: Unmount VMFS datastores to ESXi
    vmware_host_datastore:
      hostname: '{{ esxi_hostname }}'
      username: '{{ esxi_username }}'
      password: '{{ esxi_password }}'
      datastore_name: '{{ volname }}'
      state: "{{ state }}"
    delegate_to: localhost
    when: state == "absent"

  - name: Create or remove data volume
    na_elementsw_volume:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state }}"
       name: "{{ item }}"
       qos: {minIOPS: "{{ min }}", maxIOPS: "{{ max }}", burstIOPS: "{{ burst }}"}
       account_id: "{{ account }}"
       size: "{{ volsize }}"
       size_unit: gb
       enable512e: True
    register: volumes
  - debug: msg="vol name is {{ volname }}"


  - name: get volume ID and SCSI ID
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: False
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "ListVolumes","params": {"volumeName": "{{ volname }}", "volumeStatus": "active" },"id": 1}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: volResults
  - set_fact:
      volscsiID: "{{ volResults.json.result.volumes | map(attribute='scsiNAADeviceID') | list }}"
      volID: "{{ volResults.json.result.volumes | map(attribute='volumeID') | list }}"
  - debug: msg="vol scsi ID is {{ volscsiID[0] }} and volID is {{ volID }}"
    when: state == "present"



  - name: Create Access group
    na_elementsw_access_group:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state }}"
       name: "{{ volbase }}"
       account_id: "{{ account }}"
    register: results
    when: state == "present"


  - name: Get Access group ID
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: False
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "ListVolumeAccessGroups","params": {} ,"id": 2112}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: jsonVolAccResults


#only working IF no other volumes reside in here
  - name: Set Volume Access Groups ID
    set_fact:
       VolAccGrpID: "{{ item.volumeAccessGroupID }}"
       VolsInAccGrp: "{{ item.volumes }}"
    loop: "{{ jsonVolAccResults.json.result.volumeAccessGroups }}"
    loop_control:
      label: "working on: {{ item.name }}"
    when:
      - item.name == volbase
  #- debug: msg="vols in the access group right now are {{ VolsInAccGrp }}"





  - name: Remove Access group
    na_elementsw_access_group:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state }}"
       name: "{{ volbase }}"
       account_id: "{{ account }}"
    register: results
    when:
      - state == "absent"
      - VolsInAccGrp | length == 0

  - name: Delete Account "{{ account }}"
    na_elementsw_account:
       hostname: "{{ elementsw_hostname }}"
       username: "{{ elementsw_username }}"
       password: "{{ elementsw_password }}"
       state: "{{ state }}"
       element_username: "{{ account }}"
       initiator_secret: "{{ secret }}"
    when:
      - state == "absent"
      - VolsInAcc | length == 0

  - name: Get Account info by Name
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: False
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method":"GetAccountByName","params": {"username": "{{ account }}" },"id": 9191}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: jsonAccountResult
    when: state == "present"



  - name: Set acccount id set_fact
    set_fact:
       AccountID: "{{ jsonAccountResult.json.result.account.accountID }}"
    when: state == "present"

  - name: Get Volumes By Account
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: False
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "ListVolumesForAccount","params": {"accountID": "{{ AccountID }}" },"id": 9191}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: jsonvolResult
    when: state == "present"


  - name: Set Volume ids
    set_fact:
       AccountVolIDS: "{{ jsonvolResult.json.result.volumes | map(attribute='volumeID') | list }}"
    when: state == "present"


  - pause:


  - name: Set Volume Access Group
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: False
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "AddVolumesToVolumeAccessGroup","params": {"volumeAccessGroupID": "{{ VolAccGrpID }}","volumes": {{ volID }} } ,"id": 2112}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    when:
       - state == "present"
       - VolAccGrpID is defined


  - pause:





  - name: Gather iSCSI configuration information of ESXi host
    community.vmware.vmware_host_iscsi_info:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
    register: iscsi_info
    when: state == "present"
  #- debug: msg=" {{ iscsi_info.iscsi_properties.iscsi_name }}"


  - name: Add Inititator to Access Group
    uri:
      url: "{{ sf_url }}"
      method: POST
      validate_certs: False
      user: "{{ elementsw_username }}"
      password: "{{ elementsw_password }}"
      body: '{"method": "AddInitiatorsToVolumeAccessGroup", "params": {"volumeAccessGroupID": "{{ VolAccGrpID }}", "initiators": ["{{ iscsi_info.iscsi_properties.iscsi_name }}"]}, "id" : 2112}'
      force_basic_auth: yes
      status_code: 200
      body_format: json
      return_content: yes
    register: jsonagupdateResults
    #with_items: "{{ hostIQN }}"
    when:
       - VolAccGrpID is defined
       - state == "present"

  - name: Add a dynamic target to iSCSI config of ESXi
    community.vmware.vmware_host_iscsi:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      esxi_hostname: "{{ esxi_hostname }}"
      iscsi_config:
        vmhba_name: vmhba64
        send_target:
          address: "{{ send_target_address }}"
      state: "{{ state }}"
    #when: state == "present"

  - name: Rescan HBA's for a given ESXi host and refresh storage system objects
    community.vmware.vmware_host_scanhba:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      esxi_hostname: '{{ esxi_hostname }}'
      refresh_storage: true
    delegate_to: localhost
    when: state == "present"




  - name: Create Datacenter
    community.vmware.vmware_datacenter:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter_name }}'
      state: "{{ state }}"
    delegate_to: localhost
    register: datacenter_create_result
    when:
      - state == "present"
      - runtasks is defined



  - name: Create Cluster with additional changes
    community.vmware.vmware_cluster:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter_name: "{{ datacenter_name }}"
      cluster_name: "{{ cluster_name }}"
      #enable_ha: True
      #ha_vm_monitoring: vmMonitoringOnly
      #enable_drs: True
      #drs_default_vm_behavior: fullyAutomated
      #enable_vsan: False
    register: cl_result
    delegate_to: localhost
    when:
      - state == "present"
      - runtasks is defined

  - name: Mount VMFS datastores to ESXi
    vmware_host_datastore:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datastore_name: '{{ volname }}'
      datastore_type: 'vmfs'
      vmfs_device_name: 'naa.{{ volscsiID[0] }}'
      vmfs_version: 6
      esxi_hostname: '{{ esxi_hostname }}'
      state: "{{ state }}"
    delegate_to: localhost
    when: state == "present"

  - name: Delete Cluster
    community.vmware.vmware_cluster:
       hostname: "{{ vcenter_hostname }}"
       username: "{{ vcenter_username }}"
       password: "{{ vcenter_password }}"
       datacenter_name: "{{ datacenter_name }}"
       cluster_name: cluster
       enable_ha: true
       enable_drs: true
       enable_vsan: true
       state: absent
    delegate_to: localhost
    when:
      - state == "absent"
      - runtasks is defined


  - name: Delete Datacenter
    community.vmware.vmware_datacenter:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter_name }}'
      state: absent
    delegate_to: localhost
    register: datacenter_delete_result
    when:
      - state == "absent"
      - runtasks is defined
